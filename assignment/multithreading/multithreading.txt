1. What do you mean by Multithreading? Why is it important?
Ans:
Multithreading is a process to executing the multiple task in one application.
The Multithreading is important in order to efficiently use the cpu cycles and make the
application efficient.

2. What are the benefits of using Multithreading?
Ans:
efficient use of cpu cycles
Makes the program run faster
makes the program processes efficient.
access of many different task in one program is very good shecuduled.

3. What is Thread in Java?
Ans: 
Thread is nothing but it is a line of execution. The thread is something which provides
the task the line of execution. the line of execution is managed by thread shecuduler internally.
it effectively use the multiple core cpu to run the multiple tasks.

4. What are the two ways of implementing thread in Java?
Ans:
The thread can be implemented by using parent class with extends to inherit Thread class.
and using the Runnable interface by using implements keyword to the class.

class calci extends Thread
{
    public void run()
    {
        System.out.println("calculation is started");
        Scanner sc = new Scanner(System.in);
        try{
        System.out.println("enter the num1");
        Thread.sleep(3000);
        int a =sc.nextInt();
        System.out.println("enter the num2");
        Thread.sleep(3000);
        int b = sc.nextInt();
        int c=a+b;
        System.out.println("ans :"+c);
        }
        catch(Exception o)
        {
            System.out.println(o.getMessage());
        }
        
        System.out.println("the calculation is completed");
        System.out.println("***********************************");
    }
}

class Message implements Runnable 
{
    public void run()
    {
        try
        {
        System.out.println("DisplayImportant Message");
        for(int i=0;i<3;i++)
        {
            System.out.println("last submission date");
            
        }
        } 
        catch(Exception o)
        {
            System.out.println("some problem");
        }

        System.out.println("the message is done");
    }
}


public class tocreatethread {
    public static void main(String[] args) {
        System.out.println("Main thread started");
        calci c1= new calci();
        Message m1 = new Message();

        Thread t2 = new Thread(m1);
        
        c1.start();
        t2.start();
        
    }
}

5. What's the difference between thread and process?
Ans:
thread:
it is a line of execution which makes the lines to execute by handling the lines (thread)to be 
executed by shecuduler.
Process:
it is a process of processing the execution of the code.

6.How can we create daemon threads?
Ans: We can create daemon threads in java using the thread class setDaemon(true). It is used to mark the
current thread as daemon thread or user thread. isDaemon() method is generally used to check whether the
current thread is daemon or not. If the thread is a daemon, it will return true otherwise it returns false.
class Daemonthread extends Thread
{
    public DaemonThread(String name)
    {
        super(name);
    }
    if(Thread.currentThread().getName().isDaemon())
    {
        System.out.println(Thread.getName()+"it is daemon");
    }
    else{
        System.out.println(Thread.getName()+"it is user thread");
    }
}
class launch{
    public static void main(String[] args)
{
DaemonThread t1 = new DaemonThread("t1");
DaemonThread t2 = new DaemonThread("t2");
DaemonThread t3 = new DaemonThread("t3");
// Setting user thread t1 to Daemon
t1.setDaemon(true);
// starting first 2 threads
t1.start();
t2.start();
// Setting user thread t3 to Daemon
t3.setDaemon(true);
t3.start();
}
}

7. What are the wait() and sleep() methods?
Ans:
the sleep() method is static in nature.
it stops or blocks the thread execution for particular time period as mentioned
it takes the parameter of time in milliseconds.

wait()
this is non static method
this stops until it gets notify that the other threads are finished by the notify() or notifyAll()
